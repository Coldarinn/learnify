generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  username String @unique
  email    String @unique
  password String

  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  avatar    String?

  isEmailConfirmed Boolean @default(false) @map("is_email_confirmed")

  tokens Token[]

  twoFaSecret     String? @db.VarChar(255)
  tempTwoFaSecret String? @db.VarChar(255)
  isTwoFaEnabled  Boolean @default(false)

  oAuthAccounts OAuthAccount[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Token {
  id String @id @default(uuid())

  token     String    @unique
  type      TokenType
  expiresAt DateTime  @map("expires_in")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

enum TokenType {
  EMAIL_CONFIRM
  EMAIL_CHANGE
  PASSWORD_RESET

  @@map("token_types")
}

model OAuthAccount {
  id String @id @default(cuid())

  provider       OAuthProvider
  providerUserId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerUserId])
  @@map("oauth_account")
}

enum OAuthProvider {
  google
  yandex

  @@map("oauth_providers")
}
